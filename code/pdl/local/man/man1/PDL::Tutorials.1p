.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TUTORIALS 1"
.TH TUTORIALS 1 "2022-02-14" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Tutorials \- A guide to PDL's tutorial documentation.
.SH "MIGRATION"
.IX Header "MIGRATION"
These are our migration guides for users familiar with other types
of numerical analysis software.
.IP "\s-1PDL::MATLAB\s0" 5
.IX Item "PDL::MATLAB"
Migration guide for \s-1MATLAB\s0 users. This page explains the key differences
between \s-1MATLAB\s0 and \s-1PDL\s0 from the point of view of a \s-1MATLAB\s0 user.
.IP "PDL::Scilab" 5
.IX Item "PDL::Scilab"
Migration guide for Scilab users. This page explains the key differences
between Scilab and \s-1PDL\s0 from the point of view of a Scilab user.
.SH "FOUNDATION"
.IX Header "FOUNDATION"
.IP "PDL::Philosophy" 5
.IX Item "PDL::Philosophy"
Why did we write \s-1PDL\s0? This document explains some of the history and
motivation behind the Perl Data Language. It is an attempt to answer
the question \*(L"Why \s-1PDL\s0?\*(R".
.IP "PDL::QuickStart" 5
.IX Item "PDL::QuickStart"
Quick introduction to \s-1PDL\s0 features. A hands-on guide suitable for
complete beginners. This page assumes no previous knowledge of Perl
or \s-1PDL.\s0
.IP "PDL::Indexing" 5
.IX Item "PDL::Indexing"
After you have read the QuickStart guide, you should follow up with
this document. This guide goes more deeply into the concepts of
\&\*(L"indexing\*(R" and \*(L"slicing\*(R" and how they form the core of numerical
analysis with \s-1PDL.\s0
.SH "INTERMEDIATE"
.IX Header "INTERMEDIATE"
.IP "PDL::Broadcasting" 5
.IX Item "PDL::Broadcasting"
\&\fBBroadcasting\fR is one of \s-1PDL\s0's most powerful features. If you know \s-1MATLAB,\s0
you've heard of \*(L"vectorizing\*(R". Well, \fBbroadcasting\fR is like \*(L"vectorizing on
steroids\*(R". It lets you make very fast and compact code by avoiding
nested loops. All vector-based languages do this, but \s-1PDL\s0 generalizes
the technique to all sorts of applications.
.Sp
This tutorial introduces \s-1PDL\s0's broadcasting feature, and it shows an example
implementing Conway's Game of Life in 10 lines and 80 times faster than
a classical implementation.
.IP "PDL::BadValues" 5
.IX Item "PDL::BadValues"
Sometimes it is useful to specify that a certain value is \*(L"bad\*(R" or
\&\*(L"missing\*(R". Scientific instruments some times include portions of
invalid data. For example, a \s-1CCD\s0 camera might produce an image with
over-exposed pixels. \s-1PDL\s0's \*(L"bad values\*(R" feature gives you an easy way
to deal with this sort of imperfect data.
.IP "PDL::Tips" 5
.IX Item "PDL::Tips"
Tips and suggestions for using \s-1PDL.\s0 This page is an assorted collection
of programming tidbits that some \s-1PDL\s0 users have found useful. Some of
these tips might be of help when you write your programs.
.SH "ADVANCED"
.IX Header "ADVANCED"
.IP "\s-1PDL::PP\s0" 5
.IX Item "PDL::PP"
\&\s-1PDL\s0's Pre-Processor is one of \s-1PDL\s0's most powerful features. You
write a function definition in special markup and the preprocessor
generates real C code which can be compiled. With \s-1PDL:PP\s0 you get the
full speed of native C code without having to deal with the full
complexity of the C language.
.IP "\s-1PDL::API\s0" 5
.IX Item "PDL::API"
A simple cookbook explaining how to create ndarray manually, either
from Perl or from C/XS code. This page covers the \s-1PDL\s0 core routines
that comprise the \s-1PDL API.\s0 If you need to access ndarrays from C/XS,
this is the document for you.
.IP "PDL::Internals" 5
.IX Item "PDL::Internals"
Description of the inner workings of the \s-1PDL\s0 module. Very few people
need to see this. This page is mainly for \s-1PDL\s0 developers, or people
interested in debugging \s-1PDL\s0 or changing the internals of \s-1PDL.\s0 If you
can read this document and understand all of it, and you additionally
understand \s-1PDL::PP\s0, you will be awarded the title of
\&\*(L"\s-1PDL\s0 Guru\*(R".
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010 Daniel Carrera (dcarrera@gmail.com). You can distribute
and/or modify this document under the same terms as the current Perl
license.
.PP
See: http://dev.perl.org/licenses/
