.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Doc::Perldl 3"
.TH Doc::Perldl 3 "2022-04-15" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Doc::Perldl \- commands for accessing PDL doc database from 'perldl' shell
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a set of functions to
access the \s-1PDL\s0 documentation database, for use
from the \fIperldl\fR or \fIpdl2\fR shells as well as the
\&\fIpdldoc\fR command-line program.
.PP
Autoload files are also matched, via a search of the \s-1PDLLIB\s0 autoloader
tree.  That behavior can be switched off with the variable 
\&\f(CW$PERLDL::STRICT_DOCS\fR (true: don't search autoload tree; false: search
the autoload tree.)
.PP
In the interest of brevity, functions that print module names (at the moment
just \*(L"apropos\*(R" and \*(L"usage\*(R") use some shorthand notation for module names.
Currently-implemented shorthands are
.IP "\(bu" 3
P:: (short for \s-1PDL::\s0)
.IP "\(bu" 3
P::G:: (short for PDL::Graphics::)
.PP
To turn this feature off, set the variable \f(CW$PERLDL::long_mod_names\fR to a true value.
The feature is assumed to be on for the purposes of this documentation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use PDL::Doc::Perldl; # Load all documentation functions
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "apropos"
.IX Subsection "apropos"
Regex search \s-1PDL\s0 documentation database
.PP
.Vb 1
\& apropos \*(Aqtext\*(Aq
.Ve
.PP
.Vb 10
\& pdl> apropos \*(Aqpic\*(Aq
\& PDL::IO::Pic    P::IO::Pic  Module: image I/O for PDL
\& grabpic3d       P::G::TriD  Grab a 3D image from the screen.
\& rim             P::IO::Pic  Read images in most formats, with improved RGB handling.
\& rpic            P::IO::Pic  Read images in many formats with automatic format detection.
\& rpiccan         P::IO::Pic  Test which image formats can be read/written
\& wim             P::IO::Pic  Write a pdl to an image file with selected type (or using filename extensions)
\& wmpeg           P::IO::Pic  Write an image sequence (a (3,x,y,n) byte pdl) as an animation.
\& wpic            P::IO::Pic  Write images in many formats with automatic format selection.
\& wpiccan         P::IO::Pic  Test which image formats can be read/written
.Ve
.PP
To find all the manuals that come with \s-1PDL,\s0 try
.PP
.Vb 1
\&  apropos \*(Aqmanual:\*(Aq
.Ve
.PP
and to get quick info about \s-1PDL\s0 modules say
.PP
.Vb 1
\&  apropos \*(Aqmodule:\*(Aq
.Ve
.PP
You get more detailed info about a \s-1PDL\s0 function/module/manual
with the \f(CW\*(C`help\*(C'\fR function
.SS "PDL::Doc::Perldl::search_docs"
.IX Subsection "PDL::Doc::Perldl::search_docs"
Internal routine to search docs database and autoload files
.SS "PDL::Doc::Perldl::finddoc"
.IX Subsection "PDL::Doc::Perldl::finddoc"
Internal interface to the \s-1PDL\s0 documentation searcher
.SS "find_autodoc"
.IX Subsection "find_autodoc"
Internal routine that finds and returns documentation in the
PDL::AutoLoader path, if it exists.
.PP
You feed in a topic and it searches for the file \*(L"${topic}.pdl\*(R".  If
that exists, then the filename gets returned in a match structure
appropriate for the rest of finddoc.
.SS "usage"
.IX Subsection "usage"
Prints usage information for a \s-1PDL\s0 function
.PP
.Vb 1
\& Usage: usage \*(Aqfunc\*(Aq
.Ve
.PP
.Vb 1
\&   pdl> usage \*(Aqinner\*(Aq
\&
\&   inner           P::Primitive  Inner product over one dimension
\&
\&   Signature: inner(a(n); b(n); [o]c())
.Ve
.SS "sig"
.IX Subsection "sig"
prints signature of \s-1PDL\s0 function
.PP
.Vb 1
\& sig \*(Aqfunc\*(Aq
.Ve
.PP
The signature is the normal dimensionality of the
function's arguments.  Calling with different dimensions
doesn't break \*(-- it causes broadcasting.  See \s-1PDL::PP\s0 and PDL::Broadcasting for details.
.PP
.Vb 2
\&  pdl> sig \*(Aqouter\*(Aq
\&    Signature: outer(a(n); b(m); [o]c(n,m))
.Ve
.SS "whatis"
.IX Subsection "whatis"
Describe a perl and/or \s-1PDL\s0 variable or expression.  Useful for
determining the type of an expression, identifying the keys in a hash
or a data structure, or examining \s-1WTF\s0 an unknown object is.
.PP
.Vb 2
\& Usage: whatis $var
\&        whatis <expression>
.Ve
.SS "help"
.IX Subsection "help"
print documentation about a \s-1PDL\s0 function or module or show a \s-1PDL\s0 manual
.PP
In the case of multiple matches, the first command found is printed out,
and the remaining commands listed, along with the names of their modules.
.PP
.Vb 1
\& Usage: help \*(Aqfunc\*(Aq
.Ve
.PP
.Vb 3
\& pdl> help \*(AqPDL::Tutorials\*(Aq # show the guide to PDL tutorials
\& pdl> help \*(AqPDL::Slices\*(Aq    # show the docs in the PDL::Slices module
\& pdl> help \*(Aqslice\*(Aq          # show docs on the \*(Aqslice\*(Aq function
.Ve
.SS "badinfo"
.IX Subsection "badinfo"
provides information on the bad-value support of a function
.PP
And has a horrible name.
.PP
.Vb 1
\& badinfo \*(Aqfunc\*(Aq
.Ve
.PP
.Vb 4
\&  pdl> badinfo \*(Aqinner\*(Aq
\&  Bad value support for inner (in module PDL::Primitive)
\&      If "a() * b()" contains only bad data, "c()" is set bad. Otherwise "c()"
\&      will have its bad flag cleared, as it will not contain any bad values.
.Ve
