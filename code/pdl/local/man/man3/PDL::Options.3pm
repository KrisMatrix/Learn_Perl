.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Options 3"
.TH Options 3 "2022-02-27" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Options \- simplifies option passing by hash in PerlDL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use PDL::Options;
\&
\&  %hash = parse( \e%defaults, \e%user_options);
\&
\&  use PDL::Options ();
\&
\&  $opt = new PDL::Options;
\&  $opt = new PDL::Options ( \e%defaults );
\&
\&  $opt\->defaults ( \e%defaults );
\&  $opt\->synonyms ( { \*(AqCOLOR\*(Aq => \*(AqCOLOUR\*(Aq } );
\&
\&  $hashref = $opt\->defaults;
\&
\&  $opt\->options ( \e%user_options );
\&
\&  $hashref = $opt\->options;
\&
\&  $opt\->incremental(1);
\&  $opt\->full_options(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object to simplify option passing for PerlDL subroutines.
Allows you to merge a user defined options with defaults.
A simplified (non-OO) interface is provided.
.SH "Utility functions"
.IX Header "Utility functions"
.SS "ifhref"
.IX Subsection "ifhref"
.Vb 1
\&  parse({Ext => \*(AqTIF\*(Aq, ifhref($opt)});
.Ve
.PP
just return the argument if it is a hashref otherwise return
an empty hashref. Useful in conjunction with parse to return
just the default values if argument is not a hash ref
.SH "NON-OO INTERFACE"
.IX Header "NON-OO INTERFACE"
A simplified non-object oriented interface is provided.
These routines are exported into the callers namespace by default.
.IP "parse( \e%defaults, \e%user_options)" 4
.IX Item "parse( %defaults, %user_options)"
This will parse user options by using the defaults.  The following
settings are used for parsing: The options are case-sensitive, a
default synonym table is consulted (see \*(L"Default Synonyms\*(R"),
minimum-matching is turned on, and translation of values is not performed.
.Sp
A hash (not hash reference) containing the processed options is returned.
.Sp
.Vb 1
\&  %options = parse( { LINE => 1, COLOUR => \*(Aqred\*(Aq}, { COLOR => \*(Aqblue\*(Aq});
.Ve
.IP "iparse( \e%defaults, \e%user_options)" 4
.IX Item "iparse( %defaults, %user_options)"
Same as \f(CW\*(C`parse\*(C'\fR but matching is case insensitive
.SS "Default Synonyms"
.IX Subsection "Default Synonyms"
The following default synonyms are available in the non-OO interface:
.PP
.Vb 4
\&  COLOR  => COLOUR
\&  COLOUR => COLOR
\&  CENTER => CENTRE
\&  CENTRE => CENTER
.Ve
.SH "METHODS"
.IX Header "METHODS"
The following methods are available to PDL::Options objects.
.IP "\fBnew()\fR" 4
.IX Item "new()"
Constructor. Creates the object. With an optional argument can also
set the default options.
.IP "extend (\e%options)" 4
.IX Item "extend (%options)"
This will copy the existing options object and extend it with the
requested extra options.
.IP "defaults( \e%defaults )" 4
.IX Item "defaults( %defaults )"
Method to set or return the current defaults. The argument should be
a reference to a hash. The hash reference is returned if no arguments
are supplied.
.Sp
The current values are reset whenever the defaults are changed.
.IP "add_synonym (\e%synonyms)" 4
.IX Item "add_synonym (%synonyms)"
Method to add another synonym to an option set
The argument should be a reference to a hash.
.IP "add_translation (\e%translation)" 4
.IX Item "add_translation (%translation)"
Method to add another translation rule to an option set.
The argument should be a reference to a hash.
.IP "synonyms( \e%synonyms )" 4
.IX Item "synonyms( %synonyms )"
Method to set or return the current synonyms. The argument should be
a reference to a hash. The hash reference is returned if no arguments
are supplied.
.Sp
This allows you to provide alternate keywords (such as allowing
\&'\s-1COLOR\s0' as an option when your defaults uses '\s-1COLOUR\s0').
.IP "current" 4
.IX Item "current"
Returns the current state of the options. This is returned
as a hash reference (although it is not a reference to the
actual hash stored in the object). If \fBfull_options()\fR is true
the full options hash is returned, if \fBfull_options()\fR is false
only the modified options are returned (as set by the last call
to \fBoptions()\fR).
.IP "clear_current" 4
.IX Item "clear_current"
This routine clears the 'state' of the \f(CW\*(C`PDL::Options\*(C'\fR object so that
the next call to current will return an empty list
.IP "translation" 4
.IX Item "translation"
Provide translation of options to more specific values that are
recognised by the program. This allows, for example, the automatic
translation of the string 'red' to '#ff0000'.
.Sp
This method can be used to setup the dictionary and is hash reference
with the following structure:
.Sp
.Vb 8
\&    OPTIONA => {
\&                \*(Aqstring1\*(Aq => decode1,
\&                \*(Aqstring2\*(Aq => decode2
\&                },
\&    OPTIONB => {
\&                \*(Aqs4\*(Aq => decodeb1,
\&               }
\&    etc....
.Ve
.Sp
Where \s-1OPTION\s0? corresponds to the top level option name as stored in
the defaults array (eg \s-1LINECOLOR\s0) and the anonymous hashes provide
the translation from string1 ('red') to decode1 ('#ff0000').
.Sp
An options string will be translated automatically during the main \fBoptions()\fR
processing if \fBautotrans()\fR is set to true. Else translation can be
initiated by the user using the \fBtranslate()\fR method.
.IP "incremental" 4
.IX Item "incremental"
Specifies whether the user defined options will be treated as additions
to the current state of the object (1) or modifications to the default
values only (0).
.Sp
Can be used to set or return this value.
Default is false.
.IP "full_options" 4
.IX Item "full_options"
Governs whether a complete set of options is returned (ie defaults
+ expanded user options), true, or if just the expanded user
options are returned, false (ie the values specified by the user).
.Sp
This can be useful when you are only interested in the changes to
the options rather than knowing the full state. (For example, if
defaults contains keys for \s-1COLOUR\s0 and \s-1LINESTYLE\s0 and the user supplied
a key of \s-1COL,\s0 you may simply be interested in the modification to
\&\s-1COLOUR\s0 rather than the state of \s-1LINESTYLE\s0 and \s-1COLOUR.\s0)
.Sp
Default is true.
.IP "casesens" 4
.IX Item "casesens"
Specifies whether the user defined options will be processed independent
of case (0) or not (1). Default is to be case insensitive.
.Sp
Can be used to set or return this value.
.IP "minmatch" 4
.IX Item "minmatch"
Specifies whether the user defined options will be minimum matched
with the defaults (1) or whether the user defined options should match
the default keys exactly. Defaults is true (1).
.Sp
If a particular key matches exactly (within the constraints imposed
bby case sensitivity) this key will always be taken as correct even
if others are similar. For example \s-1COL\s0 would match \s-1COL\s0 and \s-1COLOUR\s0 but
this implementation will always return \s-1COL\s0 in this case (note that
for \s-1CO\s0 it will return both \s-1COL\s0 and \s-1COLOUR\s0 and pick one at random.
.Sp
Can be used to set or return this value.
.IP "autotrans" 4
.IX Item "autotrans"
Specifies whether the user defined options will be processed via
the \fBtranslate()\fR method immediately following the main options
parsing. Default is to autotranslate (1).
.Sp
Can be used to set or return this value.
.IP "casesenstrans" 4
.IX Item "casesenstrans"
Specifies whether the keys in the options hash will be matched insensitive
of case (0) during \fBtranslation()\fR or not (1). Default is to be case insensitive.
.Sp
Can be used to set or return this value.
.IP "minmatchtrans" 4
.IX Item "minmatchtrans"
Specifies whether the keys in the options hash  will be minimum matched
during \fBtranslation()\fR. Default is false (0).
.Sp
If a particular key matches exactly (within the constraints imposed
bby case sensitivity) this key will always be taken as correct even
if others are similar. For example \s-1COL\s0 would match \s-1COL\s0 and \s-1COLOUR\s0 but
this implementation will always return \s-1COL\s0 in this case (note that
for \s-1CO\s0 it will return both \s-1COL\s0 and \s-1COLOUR\s0 and pick one at random.
.Sp
Can be used to set or return this value.
.IP "warnonmissing" 4
.IX Item "warnonmissing"
Turn on or off the warning message printed when an options is not in
the options hash. This can be convenient when a user passes a set of
options that has to be parsed by several different option objects down
the line.
.IP "debug" 4
.IX Item "debug"
Turn on or off debug messages. Default is off (0).
Can be used to set or return this value.
.IP "options" 4
.IX Item "options"
Takes a set of user-defined options (as a reference to a hash)
and merges them with the current state (or the defaults; depends
on the state of \fBincremental()\fR).
.Sp
The user-supplied keys will be compared with the defaults.
Case sensitivity and minimum matching can be configured using
the \fBmimatch()\fR and \fBcasesens()\fR methods.
.Sp
A warning is raised if keys present in the user options are not
present in the defaults unless warnonmissing is set.
.Sp
A reference to a hash containing the merged options is returned.
.Sp
.Vb 1
\&  $merged = $opt\->options( { COL => \*(Aqred\*(Aq, Width => 1});
.Ve
.Sp
The state of the object can be retrieved after this by using the
\&\fBcurrent()\fR method or by using the \fBoptions()\fR method with no arguments.
If \fBfull_options()\fR is true, all options are returned (options plus
overrides), if \fBfull_options()\fR is false then only the modified
options are returned.
.Sp
Synonyms are supported if they have been configured via the \fBsynonyms()\fR
method.
.IP "translate" 4
.IX Item "translate"
Translate the current option values (eg those set via the \fBoptions()\fR
method) using the provided \fBtranslation()\fR.
.Sp
This method updates the current state of the object and returns the
updated options hash as a reference.
.Sp
.Vb 1
\&    $ref = $opt\->translate;
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Two examples are shown. The first uses the simplified interface and
the second uses the object-oriented interface.
.SH "Non-OO"
.IX Header "Non-OO"
.Vb 1
\&   use PDL::Options (\*(Aq:Func\*(Aq);
\&
\&   %options = parse( {
\&                   LINE => 1,
\&                   COLOUR => \*(Aqred\*(Aq,
\&                  },
\&                  {
\&                   COLOR => \*(Aqblue\*(Aq
\&                  }
\&                );
.Ve
.PP
This will return a hash containing
.PP
.Vb 4
\&    %options = (
\&                 LINE => 1,
\&                 COLOUR => \*(Aqblue\*(Aq
\&               )
.Ve
.SH "Object oriented"
.IX Header "Object oriented"
The following example will try to show the main points:
.PP
.Vb 1
\&   use PDL::Options ();
\&
\&   # Create new object and supply defaults
\&   $opt = new PDL::Options(   { Colour => \*(Aqred\*(Aq,
\&                                LineStyle => \*(Aqdashed\*(Aq,
\&                                LineWidth => 1
\&                              }
\&                           );
\&
\&   # Create synonyms
\&   $opt\->synonyms( { Color => \*(AqColour\*(Aq } );
\&
\&   # Create translation dictionary
\&   $opt\->translation( { Colour => {
\&                         \*(Aqblue\*(Aq => \*(Aq#0000ff\*(Aq,
\&                         \*(Aqred\*(Aq  => \*(Aq#ff0000\*(Aq,
\&                         \*(Aqgreen\*(Aq=> \*(Aq#00ff00\*(Aq
\&                                },
\&                        LineStyle => {
\&                         \*(Aqsolid\*(Aq => 1,
\&                         \*(Aqdashed\*(Aq => 2,
\&                         \*(Aqdotted\*(Aq => 3
\&                         }
\&                      }
\&                    );
\&
\&   # Generate and parse test hash
\&   $options = $opt\->options( { Color => \*(Aqgreen\*(Aq,
\&                               lines => \*(Aqsolid\*(Aq,
\&                              }
\&                           );
.Ve
.PP
When this code is run, \f(CW$options\fR will be the reference to a hash
containing the following:
.PP
.Vb 3
\&   Colour => \*(Aq#00ff00\*(Aq,
\&   LineStyle => 1,
\&   LineWidth => 1
.Ve
.PP
If \fBfull_options()\fR was set to false (0), \f(CW$options\fR would be a reference
to a hash containing:
.PP
.Vb 2
\&   Colour => \*(Aq#00ff00\*(Aq,
\&   LineStyle => 1
.Ve
.PP
Minimum matching and case insensitivity can be configured for both
the initial parsing and for the subsequent translating. The translation
can be turned off if not desired.
.PP
Currently synonyms are not available for the translation although this
could be added quite simply.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) Tim Jenness 1998 (t.jenness@jach.hawaii.edu).  All
rights reserved. There is no warranty. You are allowed to redistribute
this software / documentation under certain conditions. For details,
see the file \s-1COPYING\s0 in the \s-1PDL\s0 distribution. If this file is
separated from the \s-1PDL\s0 distribution, the copyright notice should be
included in the file.
