.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STL 3"
.TH STL 3 "2022-05-19" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::IO::STL \- read/write 3D stereolithography files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use PDL;
\& use PDL::IO::STL;
\&
\& ($vertices, $faceidx, $colours) = rstl(\*(Aqowl.stl\*(Aq); # read an STL file
\& wstl(\*(Aqfile.stl\*(Aq, $vertices, $faceidx, $colours); # write an STL file
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Normal-vector information is currently ignored.
The \*(L"attribute byte count\*(R", used sometimes to store colour information,
is currently ignored.
.PP
This module is based on CAD::Format::STL, but with \f(CW\*(C`binmode\*(C'\fR on
opened filehandles and little-endian (i.e. network) order forced on the
binary format.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "rstl"
.IX Subsection "rstl"
Read an \s-1STL\s0 file (\s-1ASCII\s0 or binary), returning vertices and face-indices.
.PP
.Vb 1
\& ($vertices, $faceidx, $colours) = rstl(\*(Aqowl.stl\*(Aq); # read an STL file
.Ve
.SS "wstl"
.IX Subsection "wstl"
Simple \s-1PDL FITS\s0 writer
.PP
.Vb 3
\&  wstl \*(Aqfile.stl\*(Aq, $vertices, $faceidx;
\&  wstl \*(Aqfile.stl\*(Aq, $vertices, $faceidx, \e%OPTIONS;
\&  wstl $fh, $vertices, $faceidx, \e%OPTIONS;
.Ve
.PP
Passing a file-handle is supported, so multiple parts can be written to
an \s-1ASCII\s0 file with several calls.
.PP
\&\f(CW\*(C`wstl\*(C'\fR accepts several options that may be passed in as a hash ref
if desired:
.IP "mode (default='binary')" 3
.IX Item "mode (default='binary')"
Whether to write out the file as \s-1ASCII\s0 or binary.
.IP "name (default='part')" 3
.IX Item "name (default='part')"
The part name to use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ed J, based on Eric Wilhelm's code in CAD::Format::STL.
